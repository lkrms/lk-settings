#!/bin/bash

LAN_IFACE=br0  # For IPv6 prefix delegation
WAN_IFACE=ppp0 # For routing
LAN_ATTACH=()  # For `ip link set <DEVICE> master <LAN_IFACE>`

LK_TTY_NO_COLOUR=1 \
    . /opt/lk-platform/bin/lk-bash-load.sh || exit
lk_include linux

LK_VERBOSE=1
lk_log_start

function connection_is_up() {
    nmcli -g DEVICE,STATE conn show |
        grep -Fx "$1:activated" >/dev/null
}

function service_is_active() {
    lk_systemctl_property_is ActiveState active "$1"
}

function wan_service_is_running() {
    lk_systemctl_running "$WAN_SERVICE"
}

function wan_service_is_starting() {
    lk_systemctl_property_is ActiveState activating "$WAN_SERVICE"
}

function maybe_restart_wan_service() {
    wan_service_is_starting || connection_is_up "$WAN_IFACE" || {
        lk_run systemctl stop "$WAN_SERVICE" || true
        lk_run systemctl start "$WAN_SERVICE" || true
        wan_service_is_running ||
            lk_die "unable to restart service: $WAN_SERVICE"
    }
}

WAN_SERVICE=NetworkManager-connect@$WAN_IFACE.service
PPPOE_IFACE=$(nmcli -g pppoe.parent conn show "$WAN_IFACE")
LAN_METHOD=

case "$1,$2" in
*,connectivity-change)
    case "$CONNECTIVITY_STATE" in
    FULL)
        lk_systemctl_reload_or_restart squid.service || true
        lk_systemctl_reload_or_restart lighttpd.service || true
        ;;
    *)
        i=0
        ! service_is_active squid.service ||
            while ((i++ < 2)); do
                lk_run squidclient mgr:offline_toggle |
                    grep -E '^offline_mode\>.*\<ON$' || continue
                break
            done
        ;;
    esac
    ;;
"$WAN_IFACE",up)
    LAN_METHOD=shared
    ;;
"$WAN_IFACE",down)
    if wan_service_is_running; then
        maybe_restart_wan_service
        LAN_METHOD=shared
    else
        LAN_METHOD=auto
    fi
    ;;
"$LAN_IFACE",*)
    connection_is_up "$WAN_IFACE" &&
        LAN_METHOD=shared ||
        LAN_METHOD=auto
    ;;&
"$LAN_IFACE",up)
    ! lk_systemctl_running smb.service ||
        lk_systemctl_restart smb.service || true
    for IFACE in ${LAN_ATTACH+"${LAN_ATTACH[@]}"} $(
        # Include active libvirt interfaces connected to this bridge
        for VM in $(virsh list --name 2>/dev/null); do
            virsh domiflist "$VM" | sed '1d; /^[[:blank:]-]*$/d' |
                awk -v "source=$LAN_IFACE" \
                    '$2 == "bridge" && $3 == source {print $1}'
        done
    ); do
        [ -d "/sys/class/net/$IFACE" ] || continue
        [ "/sys/class/net/$LAN_IFACE" -ef "/sys/class/net/$IFACE/master" ] ||
            lk_run ip link set "$IFACE" master "$LAN_IFACE" || true
    done
    ;;
"$PPPOE_IFACE",up)
    ! wan_service_is_running ||
        maybe_restart_wan_service
    ;;
esac

! lk_verbose || {
    lk_log_tty_off -a
    #lk_tty_print "Arguments:" "$(lk_echo_args "$@")"
    lk_tty_print "Environment:" "$(printenv |
        grep -E '^(CONNECT|DEVICE_|DHCP[46]_|IP[46]_|NM_|VPN_)' |
        sort)"
}

[ -n "$LAN_METHOD" ] || exit 0

CURRENT_METHOD=$(nmcli -g ipv6.method conn show "$LAN_IFACE") ||
    CURRENT_METHOD=

! lk_verbose || {
    lk_tty_print "$LAN_IFACE ipv6.method (current/required):" \
        "${CURRENT_METHOD:-<unknown>}/$LAN_METHOD"
    lk_log_tty_on
}

UNIT=add-ipv6-pd-route.service
[ "$LAN_METHOD" != shared ] ||
    { lk_systemctl_exists "$UNIT" && ! lk_systemctl_failed "$UNIT"; } || {
    systemctl reset-failed "$UNIT" 2>/dev/null || true
    systemd-run --no-block \
        --unit="$UNIT" \
        --service-type=oneshot \
        -pTimeoutStartSec=60 \
        /opt/lk-settings/bin/add-ipv6-pd-route.sh \
        "$LAN_IFACE" "$WAN_IFACE" || true
}

# Leave `ipv6.method` alone if it's already `shared` to avoid taking LAN_IFACE
# down whenever there's a WAN_IFACE outage
[ "$CURRENT_METHOD" = "$LAN_METHOD" ] ||
    { [ "$CURRENT_METHOD" = shared ] && wan_service_is_running; } || {
    lk_run nmcli conn modify --temporary "$LAN_IFACE" ipv6.method "$LAN_METHOD"
    lk_run nmcli conn up "$LAN_IFACE"
}
