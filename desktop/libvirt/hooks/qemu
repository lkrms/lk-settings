#!/bin/bash

[ "$EUID" -eq 0 ] || {
    sudo -H "$0" "$@"
    exit
}

set -euo pipefail
lk_die() { s=$? && echo "$BASH_SOURCE: $1" >&2 && (exit $s) && false || exit; }
[ -n "${LK_BASE-}" ] ||
    { . /opt/lk-platform/etc/lk-platform/lk-platform.conf &&
        [ -n "${LK_BASE-}" ]; } || lk_die "LK_BASE not set"

. "$LK_BASE/lib/bash/common.sh"
lk_require iptables provision

LK_VERBOSE=1

lk_log_start

[[ $2 =~ ^(start|release)$ ]] ||
    exit 0

lk_console_log "Processing domain XML"

XML=$(lk_mktemp_file)
lk_delete_on_exit "$XML"
cat >"$XML"

SH=$(xq \
    --arg ns http://linacreative.com/xmlns/libvirt/domain/1.0 \
    -f "$LK_BASE/lib/jq/xq_get_elements_by_ns.jq" \
    <"$XML" |
    jq '.lk.ip' |
    lk_json_sh \
        GUEST_IPS \
        '.address|to_array' \
        FORWARD_PORTS \
        '[.forward|to_array[]|.protocol as $protocol|.port|to_array[]|$protocol+":"+tostring]' \
        FORWARD_FROM \
        '[.forward|to_array[]|.protocol as $protocol|.["from-host"]|to_array[]|$protocol+":"+tostring]' \
        FORWARD_TO \
        '[.forward|to_array[]|.["to-guest"]|to_array[]]' \
        ISOLATE \
        '.isolate != null' \
        NO_LOG \
        '.isolate|has("no-log")' \
        NO_REJECT \
        '.isolate|has("no-reject")' \
        ALLOW_HOST \
        '.isolate.allow|has("gateway")' \
        ALLOW_HOST_NET \
        '.isolate.allow|has("gateway-lan")' \
        ALLOW_HOSTS \
        '.isolate.allow.host|to_array' \
        ALLOW_URLS \
        '[.isolate.allow["from-url"]|to_array[].url]' \
        ALLOW_SELECTORS \
        '[.isolate.allow["from-url"]|to_array[].filter]') &&
    eval "$SH" || lk_die "error resolving metadata"

FORWARD_PROTO=(
    ${FORWARD_PORTS[@]+"${FORWARD_PORTS[@]%:*}"}
    ${FORWARD_FROM[@]+"${FORWARD_FROM[@]%:*}"}
)
FORWARD_FROM=(
    ${FORWARD_PORTS[@]+"${FORWARD_PORTS[@]#*:}"}
    ${FORWARD_FROM[@]+"${FORWARD_FROM[@]#*:}"}
)
FORWARD_TO=(
    ${FORWARD_PORTS[@]+"${FORWARD_PORTS[@]#*:}"}
    ${FORWARD_TO[@]+"${FORWARD_TO[@]}"}
)

FORWARDING=$(for i in "${!FORWARD_FROM[@]}"; do
    printf '%s:  %5s \xe2\x86\x92 %5s\n' \
        "${FORWARD_PROTO[$i]}" "${FORWARD_FROM[$i]}" "${FORWARD_TO[$i]}"
done)

ALLOWED_URLS=()
for i in "${!ALLOW_URLS[@]}"; do
    ALLOWED_URLS[${#ALLOWED_URLS[@]}]=$(printf '%s  \xe2\x86\x92  %s\n' \
        "${ALLOW_URLS[$i]}" "${ALLOW_SELECTORS[$i]}")
done

lk_tty_print "Metadata for domain '$1':"
{
    printf '%s\t%s\0' \
        "Guest IP$(lk_plural ${#GUEST_IPS[@]} "" s)" \
        "$(lk_echo_array GUEST_IPS)" \
        "Forwarding" \
        "${FORWARDING:-<none>}"
    if ! lk_is_true ISOLATE; then
        printf '%s\t%s\0' "Isolation" "Disabled"
    else
        printf '%s\t%s\0' "Isolation" "Enabled"
        ALLOWED=()
        ! lk_is_true ALLOW_HOST || ALLOWED+=("<host>")
        ! lk_is_true ALLOW_HOST_NET || ALLOWED+=("<host network>")
        _ALLOWED=$(lk_echo_array ALLOWED ALLOW_HOSTS ALLOWED_URLS)
        [ -z "${_ALLOWED:+1}" ] ||
            printf '%s\t%s\0' "Allowed" "$_ALLOWED"
    fi
} | IFS=$'\t' lk_tty_detail_pairs -d ''

[ ${#GUEST_IPS[@]} -gt 0 ] ||
    exit 0

P=${LK_PATH_PREFIX%-}_
REJECT=${P}reject
FORWARD=${P}forward
lk_iptables_has_chain -b "$REJECT" || REJECT=REJECT
lk_iptables_has_chain -b "$FORWARD" || FORWARD=FORWARD

eval "$(lk_get_regex IPV4_REGEX IPV6_REGEX)"
IP_REGEX="($IPV4_REGEX|$IPV6_REGEX)"

function ip() {
    command ip "$_46" "$@"
}

lk_tty_print
lk_console_log "Applying firewall changes"

_ALLOW_URLS=()
for GUEST_IP in "${GUEST_IPS[@]}"; do

    _ALLOW_HOSTS=()
    [[ $GUEST_IP =~ ^$IPV4_REGEX$ ]] && _46=-4 && _default=0/0 && _lo=127.0.0.1 ||
        { [[ $GUEST_IP =~ ^$IPV6_REGEX$ ]] && _46=-6 && _default=::/0 && _lo=::1; } ||
        lk_die "invalid IP address: $GUEST_IP"
    _LK_IPTABLES_46=$_46

    lk_tty_print "Processing" "$GUEST_IP"

    GUEST_BRIDGE=$(ip route get "$GUEST_IP" |
        awk -v "ip=$GUEST_IP" '$1 == ip && $2 == "dev" { print $3 }' |
        lk_require_output head -n1) ||
        lk_die "unable to find bridge for guest IP $GUEST_IP"
    GUEST_BRIDGE_IP=$(ip address show dev "$GUEST_BRIDGE" primary |
        awk '$1 ~ /^inet6?$/ { split($2, a, "/"); print a[1] }' |
        lk_require_output head -n1) ||
        lk_die "unable to find host IP on bridge $GUEST_BRIDGE"
    HOST_INTERFACE=$(ip route show "$_default" |
        sed -En "s/.*\\<dev$S+//p" |
        awk '{ print $1 }' |
        lk_require_output head -n1) ||
        lk_die "unable to find interface for default route"
    HOST_NET=$(ip route show dev "$HOST_INTERFACE" |
        awk -v "r=^${IP_REGEX//\\/\\\\}/[0-9]+" '$0 ~ r { print $1 }' |
        lk_require_output head -n1) ||
        lk_die "unable to find network on interface $HOST_INTERFACE"
    HOST_IP=$(ip address show dev "$HOST_INTERFACE" primary |
        awk '$1 ~ /^inet6?$/ { split($2, a, "/"); print a[1] }' |
        lk_require_output head -n1) ||
        lk_die "unable to find host IP on interface $HOST_INTERFACE"
    GUEST_NAME=$(sed -E "s/[^-a-zA-Z0-9_]+//g
s/^.*(.{$((28 - (${#P} + 4)))})\$/\\1/" <<<"$1")
    FORWARD_CHAIN=${P}fwd_$GUEST_NAME
    ISOLATE_CHAIN=${P}iso_$GUEST_NAME

    printf '%s\t%s\0' \
        "Bridge interface" "$GUEST_BRIDGE" \
        "Bridge IP" "$GUEST_BRIDGE_IP" \
        "LAN interface" "$HOST_INTERFACE" \
        "LAN IP" "$HOST_IP" \
        "LAN subnet" "$HOST_NET" | IFS=$'\t' lk_tty_detail_pairs -d ''

    case "$2" in

    start)
        if lk_is_true ISOLATE; then
            ! lk_is_true ALLOW_HOST || _ALLOW_HOSTS+=("$GUEST_BRIDGE_IP")
            ! lk_is_true ALLOW_HOST_NET || _ALLOW_HOSTS+=("$HOST_NET")
            _ALLOW_HOSTS+=(${ALLOW_HOSTS[@]+"${ALLOW_HOSTS[@]}"})
            [ ${#ALLOW_URLS[@]} -eq 0 ] ||
                lk_tty_print "Downloading host lists"
            for i in "${!ALLOW_URLS[@]}"; do
                _ALLOW_URLS[$i]=${_ALLOW_URLS[$i]-$(lk_curl \
                    "${ALLOW_URLS[$i]}" | jq -r "${ALLOW_SELECTORS[$i]}")} ||
                    lk_warn "error downloading ${ALLOW_URLS[$i]}" || continue
                URL_IPS=(${_ALLOW_URLS[$i]})
                lk_tty_detail "Adding ${#URL_IPS[@]} $(lk_plural \
                    ${#URL_IPS[@]} host hosts) from" "${ALLOW_URLS[$i]}"
                _ALLOW_HOSTS+=(${URL_IPS[@]+"${URL_IPS[@]}"})
            done
            ALLOW_IP=()
            if [ ${#_ALLOW_HOSTS[@]} -gt 0 ]; then
                HOSTS=$(lk_dns_resolve_names \
                    $(printf '%s\n' "${_ALLOW_HOSTS[@]}" |
                        lk_filter_ipv4 -v | lk_filter_ipv6 -v)) &&
                    ALLOW_IP=($({ printf '%s\n' "${_ALLOW_HOSTS[@]}" &&
                        awk '{ print $1 }' <<<"$HOSTS"; } |
                        lk_filter_ipv"${_46#-}")) ||
                    lk_die "unable to resolve host names"
                REGEX=IPV${_46#-}_REGEX
                if HOSTS=$(grep -E "^${!REGEX}" <<<"$HOSTS"); then
                    lk_tty_print "Adding hosts:" $'\n'"$HOSTS"
                    unset LK_FILE_REPLACE_NO_CHANGE
                    while read -r IP HOST; do
                        LK_VERBOSE= lk_hosts_file_add "$IP" "$HOST"
                    done <<<"$HOSTS"
                    ! lk_is_false LK_FILE_REPLACE_NO_CHANGE ||
                        lk_run killall -HUP dnsmasq
                fi
            fi
            lk_iptables_flush_chain "$ISOLATE_CHAIN"
            lk_iptables_append "$ISOLATE_CHAIN" \
                -p udp -m udp --dport 53 -j ACCEPT
            lk_iptables_append "$ISOLATE_CHAIN" \
                -p udp -m udp --dport 123 -j ACCEPT
            for IP in ${ALLOW_IP[@]+"${ALLOW_IP[@]}"}; do
                lk_iptables_append "$ISOLATE_CHAIN" \
                    -d "$IP" -j ACCEPT
            done
            lk_is_true NO_LOG ||
                lk_iptables_append "$ISOLATE_CHAIN" \
                    -j LOG --log-prefix "blocked: "
            lk_is_true NO_REJECT ||
                lk_iptables_append "$ISOLATE_CHAIN" \
                    -j "$REJECT"
            lk_iptables_insert "$FORWARD" \
                -i "$GUEST_BRIDGE" -s "$GUEST_IP" -j "$ISOLATE_CHAIN"
        fi
        if [ ${#FORWARD_TO[@]} -gt 0 ]; then
            sysctl -w net.ipv4.conf.all.route_localnet=1
            lk_iptables_maybe_append POSTROUTING -t nat \
                -m addrtype --src-type LOCAL --dst-type UNICAST -j MASQUERADE
            lk_iptables_flush_chain "$FORWARD_CHAIN"
            lk_iptables_flush_chain "$FORWARD_CHAIN" nat
            _ips=0
            for _ip in "$_lo" "$HOST_IP"; do
                for i in "${!FORWARD_TO[@]}"; do
                    TO=${FORWARD_TO[$i]}
                    FROM=${FORWARD_FROM[$i]}
                    PROTO=${FORWARD_PROTO[$i]}
                    ((_ips)) ||
                        lk_iptables_append "$FORWARD_CHAIN" \
                            -p "$PROTO" -m "$PROTO" --dport "$TO" \
                            -j ACCEPT
                    lk_iptables_append "$FORWARD_CHAIN" -t nat -d "$_ip" \
                        -p "$PROTO" -m "$PROTO" --dport "$FROM" \
                        -j DNAT --to-destination "$GUEST_IP:$TO"
                done
                ((++_ips))
            done
            lk_iptables_insert "$FORWARD" \
                -o "$GUEST_BRIDGE" -d "$GUEST_IP" -j "$FORWARD_CHAIN"
            lk_iptables_insert PREROUTING -t nat -j "$FORWARD_CHAIN"
            lk_iptables_insert OUTPUT -t nat -j "$FORWARD_CHAIN"
        fi
        ;;

    release)
        set +e
        trap - ERR
        if lk_is_true ISOLATE; then
            lk_iptables_delete_all "$FORWARD" \
                -i "$GUEST_BRIDGE" -s "$GUEST_IP" -j "$ISOLATE_CHAIN"
            ! lk_iptables_has_chain "$ISOLATE_CHAIN" || {
                lk_iptables_flush_chain "$ISOLATE_CHAIN"
                lk_iptables_delete_chain "$ISOLATE_CHAIN"
            }
        fi
        if [ ${#FORWARD_TO[@]} -gt 0 ]; then
            lk_iptables_delete_all "$FORWARD" \
                -o "$GUEST_BRIDGE" -d "$GUEST_IP" -j "$FORWARD_CHAIN"
            lk_iptables_delete_all PREROUTING -t nat -j "$FORWARD_CHAIN"
            lk_iptables_delete_all OUTPUT -t nat -j "$FORWARD_CHAIN"
            ! lk_iptables_has_chain "$FORWARD_CHAIN" nat || {
                lk_iptables_flush_chain "$FORWARD_CHAIN" nat
                lk_iptables_delete_chain "$FORWARD_CHAIN" nat
            }
            ! lk_iptables_has_chain "$FORWARD_CHAIN" || {
                lk_iptables_flush_chain "$FORWARD_CHAIN"
                lk_iptables_delete_chain "$FORWARD_CHAIN"
            }
        fi
        ;;

    esac

done
