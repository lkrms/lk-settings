--event_log = log_state
event_log = log_window
--event_log = log_window_full
--event_log = function(event)
--    log_state(event)
--    log_window_full(event)
--end
--event_log = function(event)
--    if event == "focus" then
--        log_window_full(event)
--    else
--        log_state(event)
--    end
--end

log_level = log.INFO
--log_level = log.DEBUG
--log.enable_trace()

default_grid = {6, 2}

_criteria = {}

_criteria.has_multiple_displays = {
    function(state)
        return #state.displays > 1
    end,
}

_criteria.on_secondary_display = {
    function(state)
        return state.display ~= 1
    end,
}

_criteria.not_maximized = {
    function(state)
        return not state.window_is_maximized
    end,
}

_criteria.can_fill_target = {
    function(state)
        --local columns = table.unpack(state.target_grid or default_grid or {3, 1})
        -- Match QuickTile's configuration
        local columns = 6
        if width_matches_grid(state, columns) and
            position_matches_grid(state, columns, 1) then
            log.trace("Geometry matches " .. columns .. "-column grid: "
                .. table.concat(state.window_geometry, ","))
            return false
        end
        log.trace("Geometry does not match " .. columns .. "-column grid: "
            .. table.concat(state.window_geometry, ","))
        return true
    end,
}

_criteria.private = {
    class_instance_name = {
        "caprine",
        "skype",
        "keepassxc",
        "crx__hnpfjngllnobngcgfapefoaidbinmjnm", -- WhatsApp
    },
}

_criteria.pinnable = {
    operator.AND,
    _criteria.has_multiple_displays,
    {
        operator.OR,
        {event = "open"},
        {
            operator.AND,
            {event = {"focus", "blur"}},
            {display = 2},
        },
    },
}

_groups = {
    mail = {
        ["Mail"] = {
            match_criteria = {
                window_role = "3pane",
            },
            criteria = {
                event = "open",
            },
        },
    },
    irc = {
        ["hexchat"] = {}
    },
    teams = {
        ["microsoft teams"] = {},
        ["microsoft teams - preview"] = {},
        ["microsoft teams - insiders"] = {},
        ["teams-for-linux"] = {},
        ["crx__cifhbcnohmdccbgoicgdjpfamggdegmo"] = {}, -- Teams
    },
    messenger = {
        ["caprine"] = {},
    },
    skype = {
        ["skype"] = {},
        ["crx__hnpfjngllnobngcgfapefoaidbinmjnm"] = {}, -- WhatsApp
    },
    time = {
        ["clockify"] = {
            criteria = {
                window_name = "Clockify",
            },
        },
        ["app.clockify.me__tracker"] = {},
        ["linacreative.harvestapp.com__time"] = {},
    },
    todo = {
        ["todoist"] = {},
    },
    util = {
        ["keepassxc"] = {
            add_to_state = {
                set_position = set_window_position,
            },
        },
        ["spotify"] = {},
    },
    dev = {
        ["vscodium"] = {
            criteria = {
                event = "open",
            },
        },
        ["sublime_merge"] = {
            criteria = {
                event = "open",
            },
        },
        ["DBeaver"] = {
            criteria = {
                event = "open",
            },
        },
    },
}

_apps = {}
for group, apps in pairs(_groups) do
    for app, settings in pairs(apps) do
        _apps[app] = extend(settings, {group = group})
    end
end
log.debug("_apps = " .. pretty.write(_apps))

-- See README.md for an explanation
_layouts = {
    -- 1x4K
    ["3840.0x2160.0"] = {
        -- <-- 31% --> <-- ** 50% ** --> <-- 19% -->
        grid = {16, 2},
        targets = {
            criteria = _criteria.can_fill_target,
            {display = 1, xy = {1, 1},  wh = {5, 2}},
            {display = 1, xy = {6, 1},  wh = {8, 2}},
            {display = 1, xy = {14, 1}, wh = {3, 2}},
        },
        place = {display = 1, wh = {1, 1}},
        group_places = {
            mail = {workspace = 1, xy = {6, 1}, wh = {8, 2}},
            teams = {workspace = 0, xy = {1, 1}, wh = {5, 1}},
            irc = {workspace = 0, xy = {1, 1}, wh = {5, 1}},
            messenger = {workspace = 0, xy = {1, 2}, wh = {5, 1}},
            skype = {workspace = 0, xy = {1, 1}, wh = {5, 1}},
            time = {workspace = 0, xy = {14, 1}, wh = {3, 1}},
            todo = {workspace = 0, xy = {14, 2}, wh = {3, 1}},
            util = {workspace = 0, xy = {1, 2}, wh = {5, 1}},
        },
    },
    -- 2x4K
    ["7680.0x2160.0"] = {
        -- <-- 25% --> <-- ** 50% ** --> <-- 25% -->
        targets = {
            grid = {4, 2},
            criteria = _criteria.can_fill_target,
            {display = 1, xy = {1, 1}, wh = {1, 2}},
            {display = 1, xy = {2, 1}, wh = {2, 2}},
            {display = 1, xy = {4, 1}, wh = {1, 2}},
        },
        group_places = {
            mail = {workspace = 1, display = 1, xy = {2, 1}, wh = {4, 2}},
            dev = {display = 1},
        },
    },
    -- Apps pinned to secondary display
    ["*@7680.0x2160.0"] = {
        criteria = _criteria.pinnable,
        place = {workspace = 0, display = 2, wh = {2, 1}},
        group_places = {
            teams = {xy = {1, 1}},
            irc = {xy = {1, 1}},
            messenger = {xy = {3, 1}},
            skype = {xy = {5, 1}},
            time = {xy = {1, 2}},
            todo = {xy = {3, 2}},
            util = {xy = {5, 2}},
        },
    },
    -- Ultrawide
    -- 1. <-- 25% --> <-- ** 50% ** --> <-- 25% -->
    ["3440.0x1440.0"] = {
        grid = {4, 2},
        targets = {
            criteria = _criteria.can_fill_target,
            {display = 1, xy = {1, 1}, wh = {1, 2}},
            {display = 1, xy = {2, 1}, wh = {2, 2}},
            {display = 1, xy = {4, 1}, wh = {1, 2}},
        },
        place = {display = 1, wh = {1, 1}},
        group_places = {
            dev = {xy = {2, 1}, wh = {2, 2}},
            mail = {xy = {2, 1}, wh = {2, 2}},
            teams = {xy = {1, 1}},
            irc = {xy = {1, 1}},
            messenger = {xy = {1, 2}},
            skype = {xy = {1, 2}},
            time = {xy = {4, 1}},
            todo = {xy = {4, 2}},
            util = {xy = {4, 2}},
        },
    },
    -- 2. <-- 25% --> <-- ** 37.5% ** --> <-- ** 37.5% ** -->
    ["2@3440.0x1440.0"] = {
        grid = {8, 2, 3},
        targets = {
            criteria = _criteria.can_fill_target,
            {display = 1, xy = {3, 1}, wh = {3, 2}},
            {display = 1, xy = {6, 1}, wh = {3, 2}},
        },
        place = {display = 1, wh = {2, 1}},
        group_places = {
            dev = {xy = {3, 1}, wh = {3, 2}},
            mail = {xy = {3, 1}, wh = {3, 2}},
            teams = {xy = {1, 1}},
            irc = {xy = {1, 1}},
            messenger = {xy = {1, 2}},
            skype = {xy = {1, 2}},
            time = {xy = {1, 1}},
            todo = {xy = {1, 2}},
            util = {xy = {1, 2}},
        },
    },
    -- 3. <-- 33.33% --> <-- ** 33.33% ** --> <-- ** 33.33% ** -->
    ["3@3440.0x1440.0"] = {
        grid = {3, 2},
        targets = {
            criteria = _criteria.can_fill_target,
            {display = 1, xy = {1, 1}, wh = {1, 2}},
            {display = 1, xy = {2, 1}, wh = {1, 2}},
            {display = 1, xy = {3, 1}, wh = {1, 2}},
        },
        place = {display = 1, wh = {1, 1}},
        group_places = {
            dev = {xy = {2, 1}, wh = {1, 2}},
            mail = {xy = {2, 1}, wh = {1, 2}},
            teams = {xy = {1, 1}},
            irc = {xy = {1, 1}},
            messenger = {xy = {1, 2}},
            skype = {xy = {1, 2}},
            time = {xy = {3, 1}},
            todo = {xy = {3, 2}},
            util = {xy = {3, 2}},
        },
    },
    -- 4. <-- 25% --> <-- ** 75% ** -->
    ["4@3440.0x1440.0"] = {
        grid = {4, 2, 3},
        targets = {
            criteria = _criteria.can_fill_target,
            {display = 1, xy = {2, 1}, wh = {3, 2}},
        },
        place = {display = 1, wh = {1, 1}},
        group_places = {
            dev = {xy = {2, 1}, wh = {3, 2}},
            mail = {xy = {2, 1}, wh = {3, 2}},
            teams = {xy = {1, 1}},
            irc = {xy = {1, 1}},
            messenger = {xy = {1, 2}},
            skype = {xy = {1, 2}},
            time = {xy = {1, 1}},
            todo = {xy = {1, 2}},
            util = {xy = {1, 2}},
        },
    },
}

function get_place(state)
    local app, app_has_place = _apps[state.class_instance_name] or _apps[get_process_name()], false
    if app and not check_criteria(app.match_criteria, state) then
        app = nil
    end
    if app ~= nil then
        log.trace("App matched: " .. pretty.write(app, ""))
    end
    local geometry, layout, targets, place = table.concat(state.screen_geometry, "x")
    for i, layout_id in ipairs({
        state.workspace .. "@" .. state.display .. ":" .. geometry,
        "*@" .. state.display .. ":" .. geometry,
        state.display .. ":" .. geometry,
        state.workspace .. "@*:" .. geometry,
        state.workspace .. "@" .. geometry,
        "*@*:" .. geometry,
        "*:" .. geometry,
        "*@" .. geometry,
        geometry,
        "*@*:*",
        "*",
    }) do
        layout = _layouts[layout_id]
        if layout and check_criteria(layout.criteria, state) then
            log.trace("Layout matched: " .. layout_id)
            -- Use the first `targets` list found
            if not targets and layout.targets then
                targets = layout.targets
                log.trace("Targets acquired: " .. pretty.write(targets, ""))
                state.target_grid = targets.grid or layout.grid
            end
            if app then
                place = layout.group_places and layout.group_places[app.group]
                if place and check_criteria(layout.group_places.criteria, state) and
                    check_criteria(app.criteria, state) then
                    log.trace("Place assigned to app by group: " .. pretty.write(place, ""))
                    if layout.place then
                        place = extend(layout.place, place)
                    end
                    break
                end
                place = nil
                app_has_place = true
            end
        end
    end
    if not app_has_place and
        (not place -- or (not place.xy and not place.wh)
        ) and
        targets and
        check_criteria(targets.criteria, state) and
        --state.window_is_maximized_vertically and
        not state.window_is_maximized and
        (state.event == "open" or not get_window_is_decorated()) then
        place = get_snap_target(targets, state, 98)
        if place then
            log.trace("Place returned by get_snap_target: " .. pretty.write(place, ""))
        end
    end
    if place then
        place.grid = place.grid or layout.grid
        if app and app.add_to_state then
            for setting, value in pairs(app.add_to_state) do
                state[setting] = value
            end
        end
        return place
    end
end

_criteria.undecorated = {
    function(state)
        local undecorated = {
            "app.clockify.me__tracker",
            "caprine",
            "linacreative.harvestapp.com__time",
            "spotify",
            "todoist",
        }
        return check_criteria({class_instance_name = undecorated}, state) or
            (tablex.find(undecorated, get_process_name()) ~= nil)
    end,
}

rules = {
    {
        criteria = {
            operator.AND,
            {event = {"open", "blur"}},
            _criteria.private,
            function(state)
                return #state.displays == 1 and state.displays[1][3] > 1920
            end,
        },
        actions = {
            --shade_on,
        },
    },
    {
        criteria = {
            operator.AND,
            {event = "focus"},
            _criteria.private,
        },
        actions = {
            --shade_off,
        },
    },
    {
        criteria = {
            operator.AND,
            {event = "open"},
            _criteria.undecorated,
        },
        actions = {
            decorate_off,
        },
    },
    {
        criteria = {
            operator.AND,
            {event = "open"},
            function(state)
                local x, y, w, h = table.unpack(state.window_geometry)
                -- return true if the centre of the window isn't on a display
                return not get_raw_display_at(get_displays(), x + (w / 2), y + (h / 2), get_screen_geometry())
            end,
        },
        actions = {
            function(state)
                local x, y, w, h = table.unpack(state.window_geometry)
                local d_x, d_y, d_w, d_h = table.unpack(state.display_geometry)
                if x + w > d_x + d_w then
                    x = d_x + d_w - w
                elseif x < d_x then
                    x = d_x
                end
                if y + h > d_y + d_h then
                    y = d_y + d_h - h
                elseif y < d_y then
                    y = d_y
                end
                local set_position = state.set_position or state.rule.set_position or set_window_position2
                log.info("Calling <set_position>(" .. table.concat({x, y}, ", ") .. ") on " .. state.class_instance_name)
                set_position(x, y)
            end
        },
    },
    {
        criteria = {
            operator.AND,
            {event = {"open", "focus"}},
            {
                operator.OR,
                {just_opened = false},
                -- Because some apps maximise themselves after launching
                -- (e.g. Todoist, Caprine)
                {window_is_maximized = true},
            },
            {window_type = "WINDOW_TYPE_NORMAL"},
            function(state)
                return not state.window_state["_NET_WM_STATE_MODAL"] and
                    not state.window_state["_NET_WM_STATE_SKIP_TASKBAR"]
            end,
            function(state)
                state.place = get_place(state)
                return state.place ~= nil
            end,
        },
        actions = {
            function(state)
                to_place(state.place, state)
            end,
        },
    },
    {
        criteria = {
            operator.AND,
            {event = "open"},
            {window_type = "WINDOW_TYPE_NORMAL"},
            function(state)
                return table.concat(state.screen_geometry, "x") == "3440.0x1440.0"
            end,
        },
        actions = {
            function(state)
                to_workspace(0, state)
            end,
        },
    },
}
