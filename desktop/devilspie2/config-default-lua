event_log = log_state
--event_log = log_window
--event_log = log_window_full
--event_log = function(event)
--    log_state(event)
--    log_window_full(event)
--end
--event_log = function(event)
--    if event == "focus" then
--        log_window_full(event)
--    else
--        log_state(event)
--    end
--end

log_level = log.INFO
--log_level = log.DEBUG
--log.enable_trace()

default_grid = {6, 2}

_criteria = {}

_criteria.has_multiple_displays = {
    function(state)
        return #state.displays > 1
    end,
}

_criteria.on_secondary_display = {
    function(state)
        return state.display ~= 1
    end,
}

_criteria.can_fill_target = {
    function(state)
        local columns = (state.target_grid or default_grid or {3})[1]
        if width_matches_grid(state, columns) and
            position_matches_grid(state, columns, 1) then
            log.trace("Geometry matches grid: " .. table.concat(state.window_geometry, ","))
            return false
        end
        log.trace("Geometry does not match grid: " .. table.concat(state.window_geometry, ","))
        return true
    end,
}

_criteria.private = {
    class_instance_name = {
        "caprine",
        "skype",
        "keepassxc",
    },
}

_criteria.pinnable = {
    operator.AND,
    _criteria.has_multiple_displays,
    {
        operator.OR,
        event = "open",
        {
            operator.AND,
            event = {"focus", "blur"},
            display = 2,
        },
    },
}

_groups = {
    mail = {
        ["Mail"] = {
            criteria = {
                window_role = "3pane",
            },
        },
    },
    teams = {
        ["microsoft teams"] = {},
        ["microsoft teams - preview"] = {
            criteria = {
                -- 28/6/22: main window has min_width = 720@96dpi, 1080@144dpi
                function(state)
                    state.hints = state.hints or get_size_hints()
                    return state.hints and
                        state.hints.min_width >= (state.displays[1][3] >= 3840 and 1080 or 720)
                end,
            },
        },
        ["microsoft teams - insiders"] = {},
    },
    messenger = {
        ["caprine"] = {},
    },
    skype = {
        ["skype"] = {},
    },
    time = {
        ["clockify"] = {
            criteria = {
                window_name = "Clockify",
            },
        },
        ["app.clockify.me__tracker"] = {},
        ["linacreative.harvestapp.com__time"] = {},
    },
    todo = {
        ["todoist"] = {},
    },
    util = {
        ["keepassxc"] = {
            add_to_state = {
                set_position = set_window_position,
            },
        },
        ["spotify"] = {},
    },
    dev = {
        ["vscodium"] = {},
        ["sublime_merge"] = {},
        ["DBeaver"] = {},
    },
}

_apps = {}
for group, apps in pairs(_groups) do
    for app, settings in pairs(apps) do
        _apps[app] = extend(settings, {group = group})
    end
end
log.debug("_apps = " .. pretty.write(_apps))

-- e.g. for a window on display 1 of workspace 2, the following layouts will be
-- tried until a matching group_place is found and applied to the window:
-- 1.  2@1:7680.0x2160.0
-- 2.  *@1:7680.0x2160.0
-- 3.  1:7680.0x2160.0
-- 4.  2@*:7680.0x2160.0
-- 5.  2@7680.0x2160.0
-- 6.  *@*:7680.0x2160.0
-- 7.  *:7680.0x2160.0
-- 8.  *@7680.0x2160.0
-- 9.  7680.0x2160.0
-- 10. *@*:*
-- 11. *
_layouts = {
    -- 1x4K
    ["3840.0x2160.0"] = {
        place = {workspace = 1, display = 1, wh = {2, 1}},
        group_places = {
            mail = {xy = {2, 1}, wh = {4, 2}},
            teams = {xy = {1, 1}},
            messenger = {xy = {1, 2}},
            skype = {xy = {3, 1}},
            time = {xy = {5, 1}},
            todo = {xy = {5, 2}},
            util = {xy = {3, 2}},
        },
    },

    -- 2x4K
    ["7680.0x2160.0"] = {
        group_places = {
            mail = {workspace = 1, display = 1, xy = {2, 1}, wh = {4, 2}},
            dev = {display = 1},
        },
    },
    -- Apps pinned to secondary display
    ["*@7680.0x2160.0"] = {
        criteria = _criteria.pinnable,
        place = {workspace = 0, display = 2, wh = {2, 1}},
        group_places = {
            teams = {xy = {1, 1}},
            messenger = {xy = {3, 1}},
            skype = {xy = {5, 1}},
            time = {xy = {1, 2}},
            todo = {xy = {3, 2}},
            util = {xy = {5, 2}},
        },
    },

    -- Ultrawide
    -- 1. <-- 25% --> <-- ** 50% ** --> <-- 25% -->
    ["3440.0x1440.0"] = {
        grid = {4, 2},
        targets = {
            criteria = _criteria.can_fill_target,
            {display = 1, xy = {1, 1}, wh = {1, 2}},
            {display = 1, xy = {2, 1}, wh = {2, 2}},
            {display = 1, xy = {4, 1}, wh = {1, 2}},
        },
        place = {display = 1, wh = {1, 1}},
        group_places = {
            mail = {workspace = 1, xy = {2, 1}, wh = {2, 2}},
            teams = {workspace = 0, xy = {1, 1}},
            messenger = {workspace = 0, xy = {1, 2}},
            skype = {workspace = 0, xy = {1, 2}},
            time = {workspace = 0, xy = {4, 1}},
            todo = {workspace = 0, xy = {4, 2}},
            util = {workspace = 0, xy = {4, 2}},
        },
    },
    -- 2. <-- 25% --> <-- ** 37.5% ** --> <-- ** 37.5% ** -->
    ["2@3440.0x1440.0"] = {
        grid = {4, 2},
        targets = {
            criteria = _criteria.can_fill_target,
            {display = 1, xy = {1, 1}, wh = {1, 2}},
            {display = 1, xy = {2, 1}, wh = {1.5, 2}},
            {display = 1, xy = {3.5, 1}, wh = {1.5, 2}},
        },
        place = {display = 1, wh = {1, 1}},
        group_places = {
            teams = {workspace = 0, xy = {1, 1}},
            messenger = {workspace = 0, xy = {1, 1}},
            skype = {workspace = 0, xy = {1, 1}},
            time = {workspace = 0, xy = {1, 2}},
            todo = {workspace = 0, xy = {1, 2}},
            util = {workspace = 0, xy = {1, 2}},
        },
    },
    -- 3. <-- 33.33% --> <-- ** 33.33% ** --> <-- ** 33.33% ** -->
    ["3@3440.0x1440.0"] = {
        grid = {3, 2},
        targets = {
            criteria = _criteria.can_fill_target,
            {display = 1, xy = {1, 1}, wh = {1, 2}},
            {display = 1, xy = {2, 1}, wh = {1, 2}},
            {display = 1, xy = {3, 1}, wh = {1, 2}},
        },
        place = {display = 1, wh = {1, 1}},
        group_places = {
            teams = {workspace = 0, xy = {1, 1}},
            messenger = {workspace = 0, xy = {1, 2}},
            skype = {workspace = 0, xy = {1, 2}},
            time = {workspace = 0, xy = {3, 1}},
            todo = {workspace = 0, xy = {3, 2}},
            util = {workspace = 0, xy = {3, 2}},
        },
    },
    -- 4. <-- 25% --> <-- ** 75% ** -->
    ["4@3440.0x1440.0"] = {
        grid = {4, 2},
        targets = {
            criteria = _criteria.can_fill_target,
            {display = 1, xy = {1, 1}, wh = {1, 2}},
            {display = 1, xy = {2, 1}, wh = {3, 2}},
        },
        place = {display = 1, wh = {1, 1}},
        group_places = {
            teams = {workspace = 0, xy = {1, 1}},
            messenger = {workspace = 0, xy = {1, 1}},
            skype = {workspace = 0, xy = {1, 1}},
            time = {workspace = 0, xy = {1, 2}},
            todo = {workspace = 0, xy = {1, 2}},
            util = {workspace = 0, xy = {1, 2}},
        },
    },
}

function get_place(state)
    local app = _apps[state.class_instance_name] or _apps[get_process_name()]
    if app ~= nil then
        log.trace("app = " .. pretty.write(app))
    end
    local geometry, layout, targets, place = table.concat(state.screen_geometry, "x")
    for i, layout_id in ipairs({
        state.workspace .. "@" .. state.display .. ":" .. geometry,
        "*@" .. state.display .. ":" .. geometry,
        state.display .. ":" .. geometry,
        state.workspace .. "@*:" .. geometry,
        state.workspace .. "@" .. geometry,
        "*@*:" .. geometry,
        "*:" .. geometry,
        "*@" .. geometry,
        geometry,
        "*@*:*",
        "*",
    }) do
        layout = _layouts[layout_id]
        if layout and check_criteria(layout.criteria, state) then
            log.trace("layout_id = " .. layout_id)
            -- Use the first `targets` list found
            if not targets and layout.targets then
                targets = layout.targets
                log.trace("targets = " .. pretty.write(targets))
                state.target_grid = layout.grid
            end
            if app then
                place = layout.group_places and layout.group_places[app.group]
                if place and check_criteria(layout.group_places.criteria, state) and
                    check_criteria(app.criteria, state) then
                    if layout.place then
                        place = extend(layout.place, place)
                    end
                    break
                end
                place = nil
            end
        end
    end
    if not place and
        targets and
        check_criteria(targets.criteria, state) and
        state.window_is_maximized_vertically and
        not state.window_is_maximized then
        place = get_snap_target(targets, state)
    end
    if place then
        place.grid = place.grid or layout.grid
        log.trace("place = " .. pretty.write(place))
        if app and app.add_to_state then
            for setting, value in pairs(app.add_to_state) do
                state[setting] = value
            end
        end
        return place
    end
end

_criteria.undecorated = {
    function(state)
        local undecorated = {
            "app.clockify.me__tracker",
            "linacreative.harvestapp.com__time",
            "spotify",
            "todoist",
        }
        return check_criteria({class_instance_name = undecorated}, state) or
            (tablex.find(undecorated, get_process_name()) ~= nil)
    end,
}

rules = {
    {
        criteria = {
            operator.AND,
            event = {"open", "blur"},
            function(state)
                return #state.displays == 1 and state.displays[1][3] > 1920
            end,
            _criteria.private,
        },
        actions = {
            shade_on,
        },
    },
    {
        criteria = {
            operator.AND,
            event = "focus",
            _criteria.private,
        },
        actions = {
            shade_off,
        },
    },
    {
        criteria = {
            operator.AND,
            event = "open",
            _criteria.undecorated,
        },
        actions = {
            decorate_off,
        },
    },
    {
        criteria = {
            operator.AND,
            event = {"open", "focus"},
            just_opened = false,
            window_type = "WINDOW_TYPE_NORMAL",
            function(state)
                state.place = get_place(state)
                return state.place ~= nil
            end,
        },
        actions = {
            function(state)
                to_place(state.place, state)
            end,
        },
    },
}
