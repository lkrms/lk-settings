event_log = log_state
--event_log = log_window
--event_log = log_window_full
--event_log = function(event)
--    log_state(event)
--    log_window_full(event)
--end

log_level = log.INFO
--log_level = log.DEBUG

default_grid = {6, 2}

_criteria = {}
_actions = {}
_places = {}

_places.chat = {display = 2, xy = {1, 1}, wh = {2, 1}}
_places.sticky_utility = {display = 2, xy = {1, 2}, wh = {2, 1}}

_criteria.multihead = {
    function(state)
        return #state.displays > 1
    end
}

_criteria.primary_display = {
    display = 1
}

_criteria.not_primary_display = {
    function(state)
        return state.display ~= 1
    end
}

_criteria.sticky = {
    operator.AND,
    _criteria.multihead,
    {
        operator.OR,
        event = "open",
        {
            operator.AND,
            event = {"focus", "blur"},
            _criteria.not_primary_display
        }
    }
}

_criteria.tacky = {
    operator.AND,
    _criteria.multihead,
    _criteria.not_primary_display,
    event = "open"
}

_criteria.private = {
    operator.AND,
    _criteria.multihead,
    _criteria.not_primary_display,
    class_instance_name = {
        --"caprine",
        --"skype",
        "keepassxc"
    }
}

_criteria.dev = {
    operator.AND,
    _criteria.multihead,
    _criteria.not_primary_display,
    class_instance_name = {
        "vscodium",
        "sublime_merge",
        "DBeaver"
    }
}

_actions.sticky = {
    pin_on
}

_actions.undecorated_sticky = {
    decorate_off,
    pin_on
}

rules = {
    {
        criteria = {
            operator.AND,
            event = {"open", "blur"},
            _criteria.private
        },
        actions = {
            maximize_off,
            shade_on
        }
    },
    {
        criteria = {
            operator.AND,
            event = "focus",
            _criteria.private
        },
        actions = {
            shade_off
        }
    },
    {
        criteria = {
            operator.AND,
            event = "open",
            _criteria.dev
        },
        actions = {
            {to_display, {1}}
        }
    },
    {
        criteria = {
            operator.AND,
            class_instance_name = "Mail",
            window_role = "3pane"
        },
        actions = {
            {to_workspace, {1}},
            {to_place, {{display = 1, xy = {1, 1}, wh = {3, 2}}}}
        }
    },
    {
        criteria = {
            operator.AND,
            class_instance_name = {
                "todoist",
                "spotify"
            },
            _criteria.sticky
        },
        actions = {
            decorate_off,
            {to_workspace, {1}},
            {to_place, {_places.sticky_utility}}
        }
    },
    {
        criteria = {
            operator.AND,
            class_instance_name = {
                "keepassxc"
            },
            _criteria.sticky
        },
        actions = append(
            _actions.sticky,
            {
                {to_place, {_places.sticky_utility}}
            }
        ),
        set_position = set_window_position
    },
    {
        criteria = {
            operator.AND,
            class_instance_name = {
                "caprine"
            },
            _criteria.sticky
        },
        actions = append(
            _actions.sticky,
            {
                {to_place, {_places.chat}}
            }
        )
    },
    {
        criteria = {
            operator.AND,
            class_instance_name = {
                "skype",
                "teams.microsoft.com"
            },
            _criteria.sticky
        },
        actions = append(
            _actions.sticky,
            {
                {to_place, {_places.chat}}
            }
        )
    },
    {
        criteria = {
            operator.AND,
            class_instance_name = {
                "microsoft teams",
                "microsoft teams - preview"
            },
            _criteria.tacky,
            function(state)
                state.hints = state.hints or get_size_hints()
                return state.hints and state.hints.min_width == 1080 and state.hints.min_height == 750
            end
        },
        actions = append(
            _actions.sticky,
            {
                {to_place, {_places.chat}}
            }
        )
    }
}
