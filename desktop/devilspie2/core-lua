pretty = require("pl.pretty")
stringx = require("pl.stringx")
tablex = require("pl.tablex")

stringx.import()

log = {
    CRITICAL = 2,
    ERROR = 3,
    WARNING = 4,
    INFO = 6,
    DEBUG = 7,
    _trace_enabled = false,
    _print = function(level, message)
        if log_level == nil then
            log_level = log.INFO
        end
        if level <= log_level then
            debug_print(message and "==> " .. message or "")
        end
    end,
    enable_trace = function()
        log._trace_enabled = true
    end,
    critical = function(message)
        log._print(log.CRITICAL, message)
    end,
    error = function(message)
        log._print(log.ERROR, message)
    end,
    warning = function(message)
        log._print(log.WARNING, message)
    end,
    info = function(message)
        log._print(log.INFO, message)
    end,
    debug = function(message)
        log._print(log.DEBUG, message)
    end,
    trace = function(message)
        if log._trace_enabled then
            log._print(log.DEBUG, message)
        end
    end,
}

operator = {
    AND = 1,
    OR = 2,
    NOT = 3,
}

function extend(copy_table, update_table)
    return tablex.update(tablex.copy(copy_table), update_table)
end

function append(copy_table, insert_table)
    local copy = tablex.copy(copy_table)
    tablex.insertvalues(copy, insert_table)
    return copy
end

function bool(v)
    return v ~= nil and v ~= false
end

function xor(a, b)
    return bool(a) ~= bool(b)
end

-- Return the geometry of all connected displays.
--
-- Display 1 is always the primary display. Secondary display numbering is left
-- to right, top to bottom.
--
-- Geometry values:
--
--     1. x
--     2. y
--     3. width
--     4. height
--     5. left strut
--     6. right strut
--     7. top strut
--     8. bottom strut
--
-- Example:
--
--     {{0, 0, 3840, 2160, 0, 0, 37, 0}, {3840, 0, 3840, 2160, 0, 0, 37, 0}}
function get_displays()
    if displays == nil then
        log.debug("Getting screen geometry from xrandr")
        local f = assert(io.popen(
            [[
xrandr | awk 'function o(p, g, _) {
  split(g, _, /[x+]/)
  printf("%s   { %s, %s, %s, %s, 0, 0, 0, 0 },\n", (p ? 0 : 1), _[3], _[4], _[1], _[2] ) | s
}
BEGIN {
  r = "^[0-9]+x[0-9]+(\\+[0-9]+){2}$"
  s = "sort -n -k1 -k3 -k4 | cut -c3-"
  print "return {"
}
$2 == "connected" && $3 ~ r { o(0, $3) }
$2 == "connected" && $3 == "primary" && $4 ~ r { o(1, $4) }
END { close(s); print "}" }'
]]
        ))
        local output = f:read("*a")
        assert(f:close())
        displays = load(output)()
        local struts = get_struts()
        log.debug("struts = " .. pretty.write(struts, ""))
        for i, strut in ipairs(struts) do
            local strut_display = get_display_at(displays, strut[5], strut[6])
            if strut_display == nil then
                log.warning("Invalid strut geometry: " .. pretty.write(strut, ""))
                goto next_strut
            end
            local display = displays[strut_display]
            for j = 1, 4 do
                display[4 + j] = math.max(display[4 + j], strut[j])
            end
            ::next_strut::
        end
        log.debug("displays = " .. pretty.write(displays, ""))
    end
    return displays
end

function get_struts()
    log.debug("Getting strut geometry from xprop")
    local f = assert(io.popen(
        [[
echo "return {"
xprop -root 32x '\n$0+\n' _NET_CLIENT_LIST |
    tail -n1 |
    sed -E 's/[ \t,]+/\n/g' |
    xargs -I '{}' xprop -id '{}' \
        32a '\n{} $0\n' _NET_WM_WINDOW_TYPE |
    sed -En 's/^(0x[0-9a-fA-F]+) _NET_WM_WINDOW_TYPE_DOCK$/\1/p' |
    xargs -I '{}' xprop -id '{}' \
        32c '\n\t{$0, $1, $2, $3, $8, $4},\n' _NET_WM_STRUT_PARTIAL |
    sed -E '/^\t\{/!d'
echo "}"
]]
    ))
    local output = f:read("*a")
    assert(f:close())
    return load(output)()
end

function get_size_hints()
    local window_xid = get_window_xid()
    if window_xid == 0 then
        return
    end
    log.debug("Getting size hints from xprop")
    local f = assert(io.popen(
        [[
printf "return "
xprop -id ]] .. window_xid .. [[ \
    32i "\\n{\$0$(printf ', $%s' {1..17}))}" WM_NORMAL_HINTS |
    sed -E '/^\{([0-9]+(, )?)*\}$/!d'
]]
    ))
    local output = f:read("*a")
    assert(f:close())
    local hints = load(output)() or nil
    if hints then
        hints = {
            flags = hints[1],
            x = hints[2],
            y = hints[3],
            width = hints[4],
            height = hints[5],
            min_width = hints[6],
            min_height = hints[7],
            max_width = hints[8],
            max_height = hints[9],
            width_inc = hints[10],
            height_inc = hints[11],
            min_aspect_x = hints[12],
            min_aspect_y = hints[13],
            max_aspect_x = hints[14],
            max_aspect_y = hints[15],
            base_width = hints[16],
            base_height = hints[17],
            gravity = hints[18],
        }
        log.debug("hints = " .. pretty.write(hints, ""))
    end
    return hints
end

function get_window_state()
    return tablex.makeset(get_window_property("_NET_WM_STATE"):replace(" ", ""):split(","))
end

function get_display_at(displays, x, y, screen_w, screen_h)
    x, y = math.max(0, x), math.max(0, y)
    x, y = math.min((screen_w or x + 1) - 1, x), math.min((screen_h or y + 1) - 1, y)
    for display, display_geometry in ipairs(displays) do
        local dx, dy, dw, dh = table.unpack(display_geometry)
        if x >= dx and y >= dy and x < dx + dw and y < dy + dh then
            return display
        end
    end
end

function get_raw_display_at(displays, x, y)
    for display, display_geometry in ipairs(displays) do
        local dx, dy, dw, dh = table.unpack(display_geometry)
        if x >= dx and y >= dy and x < dx + dw and y < dy + dh then
            return display
        end
    end
end

function get_display()
    local x, y = get_window_geometry()
    return get_display_at(get_displays(), x, y, get_screen_geometry())
end

function get_snap_target(targets, state, min_area_percent)
    local x, y, w, h = table.unpack(state.window_geometry)
    x, y = math.max(0, math.floor(x + w / 2)), math.max(0, math.floor(y + h / 2))
    x, y = math.min(state.screen_geometry[1] - 1, x), math.min(state.screen_geometry[2] - 1, y)
    for i, target in ipairs(targets) do
        target.grid = target.grid or state.target_grid
        local t     = normalise_place(target, state)
        local xywh  = _get_xywh(t.display, t.grid[1], t.grid[2], t.xy[1], t.xy[2], t.wh[1], t.wh[2])
        if xywh == nil then
            return
        end
        local tx, ty, tw, th = table.unpack(xywh)
        if tx > -1 and ty > -1 and tw > 0 and th > 0 and
            x >= tx and y >= ty and x < tx + tw and y < ty + th then
            if state.display_percent > 20 then
                return target
            end
            local target_percent = math.floor(100 * w * h / (tw * th))
            log.trace("Window area relative to target: " .. target_percent .. "%")
            if target_percent >= (min_area_percent or 100) then
                return target
            end
        end
    end
end

function get_display_geometry(display)
    local geometry = get_displays()[display or get_display()]
    if geometry == nil then
        return
    end
    local d_x, d_y, d_w, d_h, s_l, s_r, s_t, s_b = table.unpack(geometry)
    d_x = d_x + s_l
    d_y = d_y + s_t
    d_w = d_w - (s_l + s_r)
    d_h = d_h - (s_t + s_b)
    return {d_x, d_y, d_w, d_h}
end

function get_current_workspace()
    log.debug("Getting current workspace from xprop")
    local f = assert(io.popen(
        [[
xprop -root 32c '\n$0+\n' _NET_CURRENT_DESKTOP | sed '2!d'
]]
    ))
    local workspace = f:read("*a")
    assert(f:close())
    return workspace + 1
end

function _get_decoration_geometry(window_geometry, window_client_geometry)
    local w = window_geometry[3] - window_client_geometry[3]
    local h = window_geometry[4] - window_client_geometry[4]
    return math.max(0, w), math.max(0, h)
end

function get_state(event)
    local display = get_display()
    local window_geometry, window_client_geometry = {get_window_geometry()}, {get_window_client_geometry()}
    local display_geometry = display and get_display_geometry(display) or nil
    return {
        event = event,
        workspace = get_current_workspace(),
        displays = get_displays(),
        display = display,
        display_geometry = display_geometry,
        window_name = get_window_name(),
        application_name = event == "close" and "" or (get_application_name() or ""),
        window_geometry = window_geometry,
        window_client_geometry = window_client_geometry,
        window_decoration_geometry = {_get_decoration_geometry(window_geometry, window_client_geometry)},
        window_is_maximized = get_window_is_maximized() or
            (window_geometry and display_geometry and
                -- Use `>=` because decorations may be added
                window_geometry[3] >= display_geometry[3] and
                window_geometry[4] >= display_geometry[4]),
        window_is_maximized_vertically = get_window_is_maximized_vertically() or
            (window_geometry and display_geometry and
                window_geometry[4] >= display_geometry[4]),
        window_type = get_window_type(),
        window_state = get_window_state(),
        class_instance_name = get_class_instance_name() or get_process_name() or "",
        window_role = get_window_role(),
        window_xid = get_window_xid(),
        screen_geometry = {get_screen_geometry()},
        display_percent = window_geometry and display_geometry and
            math.floor(100 * window_geometry[3] * window_geometry[4] / (display_geometry[3] * display_geometry[4])),
        just_opened = event == "focus" and opened_window_xid and opened_window_xid == get_window_xid() or false,
    }
end

function to_workspace(workspace, state)
    if workspace == 0 then
        pin_on(state)
        return
    end
    log.info("Calling set_window_workspace(" .. workspace .. ") on " .. state.class_instance_name)
    set_window_workspace(workspace)
end

function to_back(state)
    log.info("Calling set_on_bottom() on " .. state.class_instance_name)
    set_on_bottom()
end

function to_opacity(value, state)
    log.info("Calling set_opacity() on " .. state.class_instance_name)
    set_opacity(value)
end

function pin_on(state)
    log.info("Calling pin_window() on " .. state.class_instance_name)
    pin_window()
end

function pin_off(state)
    log.info("Calling unpin_window() on " .. state.class_instance_name)
    unpin_window()
end

function skip_tasklist_on(state)
    log.info("Calling set_skip_tasklist(true) on " .. state.class_instance_name)
    set_skip_tasklist(true)
end

function skip_tasklist_off(state)
    log.info("Calling set_skip_tasklist(false) on " .. state.class_instance_name)
    set_skip_tasklist(false)
end

function decorate_on(state)
    log.info("Calling decorate_window() on " .. state.class_instance_name)
    decorate_window()
    state.just_decorated = true
end

function decorate_off(state)
    log.info("Calling undecorate_window() on " .. state.class_instance_name)
    undecorate_window()
    state.just_undecorated = true
end

function shade_on(state)
    log.info("Calling shade() on " .. state.class_instance_name)
    shade()
end

function shade_off(state)
    log.info("Calling unshade() on " .. state.class_instance_name)
    unshade()
end

function maximize_on(state)
    if not state.window_is_maximized then
        log.info("Calling maximize() on " .. state.class_instance_name)
        maximize()
        state.window_is_maximized = true
    end
end

function maximize_off(state)
    if state.window_is_maximized then
        log.info("Calling unmaximize() on " .. state.class_instance_name)
        unmaximize()
        state.window_is_maximized = false
    end
end

function minimize_on(state)
    log.info("Calling minimize() on " .. state.class_instance_name)
    minimize()
end

function minimize_off(state)
    log.info("Calling unminimize() on " .. state.class_instance_name)
    unminimize()
end

function _get_xywh(display, grid_columns, grid_rows, column1, row1, columns, rows)
    local x, y, w, h, d_x, d_y, d_w, d_h, col_w, row_h = -1, -1, 0, 0
    local display_geometry = get_display_geometry(display)
    if display_geometry == nil then
        log.warning("Invalid display: " .. display)
        return
    end
    d_x, d_y, d_w, d_h = table.unpack(display_geometry)
    col_w = math.floor(d_w / grid_columns)
    row_h = math.floor(d_h / grid_rows)
    if column1 > 0 and row1 > 0 then
        x = d_x + (column1 - 1) * col_w
        y = d_y + (row1 - 1) * row_h
    end
    if columns > 0 and rows > 0 then
        w = columns < grid_columns and columns * col_w or d_w
        h = rows < grid_rows and rows * row_h or d_h
    end
    return {x, y, w, h}
end

function _to_place(display, grid_columns, grid_rows, column1, row1, columns, rows, state)
    local xywh = _get_xywh(display, grid_columns, grid_rows, column1, row1, columns, rows)
    if xywh == nil then
        return
    end
    local x, y, w, h = table.unpack(xywh)
    if state.just_undecorated and w > 0 and h > 0 then
        local f_w = state.window_geometry[3] - state.window_client_geometry[3]
        local f_h = state.window_geometry[4] - state.window_client_geometry[4]
        decoration_width = math.max(decoration_width or 0, f_w)
        decoration_height = math.max(decoration_height or 0, f_h)
        w = w + f_w
        h = h + f_h
    end
    local set_size, set_position = state.set_size or state.rule.set_size or set_window_size,
        state.set_position or state.rule.set_position or set_window_position2
    if w > 0 and h > 0 then
        maximize_off(state)
        log.info("Calling <set_size>(" .. table.concat({w, h}, ", ") .. ") on " .. state.class_instance_name)
        set_size(w, h)
    end
    if x > -1 and y > -1 then
        maximize_off(state)
        log.info("Calling <set_position>(" .. table.concat({x, y}, ", ") .. ") on " .. state.class_instance_name)
        set_position(x, y)
        state.display = display
    end
end

function normalise_place(place, state)
    local p = {
        display = place.display or state.display,
        grid = place.grid or default_grid or {3, 1},
        xy = place.xy or {place.column1 or 0, place.row1 or 0},
        wh = place.wh or {place.columns or 0, place.rows or 0},
    }
    p.grid[1] = math.max(p.grid[1], p.xy[1] + p.wh[1] - 1)
    p.grid[2] = math.max(p.grid[2], p.xy[2] + p.wh[2] - 1)
    return p
end

function to_place(place, state)
    local p = normalise_place(place, state)
    _to_place(p.display, p.grid[1], p.grid[2], p.xy[1], p.xy[2], p.wh[1], p.wh[2], state)
    if place.workspace ~= nil then
        to_workspace(place.workspace, state)
    end
    if place.display ~= nil and place.display ~= state.display then
        to_display(place.display, state)
    end
end

function to_display(display, state)
    if display == state.display then
        log.warning("Already on display " .. display)
        return
    end
    local from, to = get_display_geometry(state.display), get_display_geometry(display)
    log.debug("from = " .. pretty.write(from, ""))
    log.debug("to = " .. pretty.write(to, ""))
    if to == nil then
        log.warning("Invalid display: " .. display)
        return
    end
    local set_position = state.set_position or state.rule.set_position or set_window_position2
    if state.window_is_maximized then
        maximize_off(state)
        set_position(to[1], to[2])
        maximize_on(state)
    else
        local x, y = table.unpack(state.window_geometry)
        x = x + to[1] - from[1]
        y = y + to[2] - from[2]
        log.info("Calling <set_position>(" .. table.concat({x, y}, ", ") .. ") on " .. state.class_instance_name)
        set_position(x, y)
    end
end

function check_criteria(criteria, state)
    if criteria == nil then
        return true
    end
    local and_result, or_result, negate, op = true, false, false
    for k, v in pairs(criteria) do
        local result
        if type(k) == "number" then
            if v == "AND" or v == operator.AND then
                if and_result == false then
                    return xor(false, negate)
                end
                op = operator.AND
            elseif v == "OR" or v == operator.OR then
                if or_result == true then
                    return xor(true, negate)
                end
                op = operator.OR
            elseif v == "NOT" or v == operator.NOT then
                negate = true
            elseif type(v) == "function" then
                result = v(state)
            elseif type(v) == "table" then
                result = check_criteria(v, state)
            end
        elseif type(v) == "table" then
            result = tablex.find(v, state[k]) ~= nil
        else
            result = state[k] == v
        end
        if result ~= nil then
            and_result = and_result and result
            or_result = or_result or result
            if op == operator.AND and and_result == false then
                return xor(false, negate)
            elseif op == operator.OR and or_result == true then
                return xor(true, negate)
            end
        end
    end
    return and_result
end

function process_event(event)
    if get_window_type() == "WINDOW_ERROR" then
        log.debug("Skipping WINDOW_ERROR")
        return
    end
    if event == "close" then
        closed_window_xid = get_window_xid()
    elseif event == "blur" then
        if closed_window_xid and get_window_xid() == closed_window_xid then
            closed_window_xid = nil
            log.info("Skipping closed window blur")
            return
        end
        closed_window_xid = nil
    end
    if event_log ~= nil then
        event_log(event)
    end
    if rules == nil then
        return
    end
    local state = get_state(event)
    if event == "open" then
        opened_window_xid = get_window_xid()
    elseif event == "focus" then
        opened_window_xid = nil
    end
    local type_action = {
        ["function"] = function(fn, state)
            fn(state)
        end,
        ["table"] = function(t, state)
            local args = tablex.copy(t[2])
            table.insert(args, state)
            t[1](table.unpack(args))
        end,
    }
    for i, rule in ipairs(rules) do
        log.trace("rules[" .. i .. "].criteria = " .. pretty.write(rule.criteria, ""))
        if rule.criteria ~= nil and not check_criteria(rule.criteria, state) then
            log.trace("Criteria not met")
            goto next_rule
        end
        log.trace("Criteria met")
        state.rule = rule
        for j, action in ipairs(rule.actions) do
            log.trace("rules[" .. i .. "].actions[" .. j .. "] = " .. pretty.write(action, ""))
            _action = type_action[type(action)]
            if _action ~= nil then
                state.action = action
                _action(action, state)
            else
                log.warning("Invalid type '" .. type(action) .. "': rules[" .. i .. "].actions[" .. j .. "]")
            end
        end
        ::next_rule::
    end
end

function width_matches_grid(state, columns)
    local col_w = math.floor(state.display_geometry[3] / columns)
    local delta_x, delta_y, delta_w = table.unpack(get_grid_delta(state, columns, 1))
    return (((state.window_geometry[3] + 1) % col_w <= 1 + delta_w) or
            ((state.window_geometry[3] - state.window_decoration_geometry[1] + 1) % col_w <= 1 + delta_w)) and
        (log.trace("Window width matches grid with width " .. col_w .. "±" .. delta_w) or true)
end

function position_matches_grid(state, columns, rows)
    local d_x, d_y, d_w, d_h = table.unpack(state.display_geometry)
    local x, y, w, h = table.unpack(state.window_geometry)
    local dec_w, dec_h = table.unpack(state.window_decoration_geometry)
    local delta_x, delta_y = table.unpack(get_grid_delta(state, columns, rows))
    local col_w, row_h =
        math.floor(d_w / columns),
        math.floor(d_h / rows)
    local _dec_w = dec_w / 2

    return ((x >= d_x and x + w <= d_x + d_w and (x - d_x + 1) % col_w <= 1 + delta_x and
                y >= d_y and y + h <= d_y + d_h and (y - d_y + 1) % row_h <= 1 + delta_y) or
            -- Adjust for unmaximizing in Xfce with "hide frame when maximized" enabled
            ((x + _dec_w) >= d_x and (x + _dec_w) + (w - dec_w) <= d_x + d_w and ((x + _dec_w) - d_x + 1) % col_w <= 1 + delta_x and
                y >= d_y and y + (h - dec_h) <= d_y + d_h and (y - d_y + 1) % row_h <= 1 + delta_y)) and
        (log.trace("Window position matches grid with width " .. col_w .. "±" .. delta_x) or true)
end

function get_grid_delta(state, columns, rows)
    local d_x, d_y, d_w, d_h = table.unpack(state.display_geometry)
    local x, y, w, h = table.unpack(state.window_geometry)
    local min_col_w, min_row_h, max_col_w, max_row_h =
        math.floor(d_w / columns),
        math.floor(d_h / rows),
        math.ceil(d_w / columns),
        math.ceil(d_h / rows)
    local x_cols, y_rows, w_cols, h_rows =
        math.floor((x - d_x) / min_col_w),
        math.floor((y - d_y) / min_row_h),
        math.floor(w / min_col_w),
        math.floor(h / min_row_h)
    return {
        (max_col_w - min_col_w) * x_cols,
        (max_row_h - min_row_h) * y_rows,
        (max_col_w - min_col_w) * w_cols,
        (max_row_h - min_row_h) * h_rows,
    }
end

function log_window_full(event)
    debug_print()
    local output = {
        get_window_name = get_window_name(),
        get_window_has_name = (get_window_has_name() and "true" or "false"),
        get_application_name = event == "close" and "" or (get_application_name() or ""),
        get_process_name = get_process_name(),
        get_window_geometry = table.concat({get_window_geometry()}, ","),
        get_window_client_geometry = table.concat({get_window_client_geometry()}, ","),
        get_window_is_maximized = (get_window_is_maximized() and "true" or "false"),
        get_window_is_maximized_vertically = (get_window_is_maximized_vertically() and "true" or "false"),
        get_window_is_maximized_horizontally = (get_window_is_maximized_horizontally() and "true" or "false"),
        get_window_is_decorated = get_window_is_decorated(),
        get_window_type = get_window_type(),
        get_class_instance_name = (get_class_instance_name() or ""),
        get_window_role = get_window_role(),
        get_window_xid = get_window_xid(),
        get_window_class = event == "close" and "" or (get_window_class() or ""),
        get_workspace_count = get_workspace_count(),
        get_screen_geometry = table.concat({get_screen_geometry()}, "x"),
        get_window_fullscreen = (get_window_fullscreen() and "true" or "false"),
        xywh = table.concat({xywh()}, ","),
        --
        get_size_hints = pretty.write(get_size_hints() or {}, ""),
        get_window_state = pretty.write(get_window_state() or {}, ""),
        get_current_workspace = get_current_workspace(),
    }
    debug_print("On " .. event .. ":")
    for fn, result in pairs(output) do
        if result ~= "" then
            debug_print(string.format("  %-38s%s", fn .. ":", result))
        end
    end
    -- Source: http://standards.freedesktop.org/wm-spec/wm-spec-latest.html
    local props = {
        "_NET_SUPPORTED",
        "_NET_CLIENT_LIST",
        "_NET_NUMBER_OF_DESKTOPS",
        "_NET_DESKTOP_GEOMETRY",
        "_NET_DESKTOP_VIEWPORT",
        "_NET_CURRENT_DESKTOP",
        "_NET_DESKTOP_NAMES",
        "_NET_ACTIVE_WINDOW",
        "_NET_WORKAREA",
        "_NET_SUPPORTING_WM_CHECK",
        "_NET_VIRTUAL_ROOTS",
        "_NET_DESKTOP_LAYOUT",
        "_NET_SHOWING_DESKTOP",
        "_NET_WM_NAME",
        "_NET_WM_VISIBLE_NAME",
        "_NET_WM_ICON_NAME",
        "_NET_WM_VISIBLE_ICON_NAME",
        "_NET_WM_DESKTOP",
        "_NET_WM_WINDOW_TYPE",
        "_NET_WM_STATE",
        "_NET_WM_ALLOWED_ACTIONS",
        "_NET_WM_STRUT",
        "_NET_WM_STRUT_PARTIAL",
        "_NET_WM_ICON_GEOMETRY",
        "_NET_WM_ICON",
        "_NET_WM_PID",
        "_NET_WM_HANDLED_ICONS",
        "_NET_WM_USER_TIME",
        "_NET_WM_USER_TIME_WINDOW",
        "_NET_FRAME_EXTENTS",
        "_NET_WM_OPAQUE_REGION",
        "_NET_WM_BYPASS_COMPOSITOR",
    }
    local empty, no_result = {}, {}
    debug_print("  get_window_property:")
    for i, prop in ipairs(props) do
        local val = get_window_property(prop)
        if val == nil or val == "" then
            empty[#empty + 1] = prop
        elseif val == "NO RESULT" then
            no_result[#no_result + 1] = prop
        else
            debug_print(string.format("    %-36s", prop) .. val)
        end
    end
    debug_print(string.format("    %-36s", "===="))
    debug_print(string.format("    %-36s", "Empty:") .. table.concat(empty, ","))
    debug_print(string.format("    %-36s", '"NO RESULT":') .. table.concat(no_result, ","))
end

function log_window(event)
    local summary = {
        "[",
        event,
        "] (",
        table.concat({get_screen_geometry()}, "x"),
        ") ",
        get_class_instance_name() or "",
        ".",
        event == "close" and "" or (get_window_class() or ""),
        " @ ",
        table.concat({get_display() or -1, get_window_geometry()}, ","),
        " [",
        get_window_type(),
        "]",
    }
    debug_print(table.concat(summary))
end

function log_state(event)
    debug_print()
    debug_print("state = " .. pretty.write(get_state(event), ""))
end
